**********
动态规划，永远的痛！

从递归到动态规划一步步

找到子问题
**********

class Solution {
public:
    int numRollsToTarget(int n, int k, int target) {
        // if(n == 1)
        // {
        //     if(target > k)
        //         return 0;
        //     return 1;
        // }
        // if(target - 1 > k * (n - 1))
        //     return 0;

        // int result = 0;

        // for(int i = 0; i < pow(2, target - 1); i++)
        // {
        //     if(__builtin_popcount(i) == n - 1)
        //     {
        //         int prev = -1;
        //         bool ans = true;

        //         for(int j = 0; j < target - 1; j++)
        //         {
        //             if((i >> j) & 1)
        //             {
        //                 if(j - prev > k)
        //                 {
        //                     ans = false;
        //                     break;
        //                 }
        //                 else
        //                 {
        //                     prev = j;
        //                 }
        //             }
        //         }

        //         if(ans)
        //             result += 1;
        //     }
        // }

        // return result;

        //if(target < n || target > n * k)
        //    return 0;
        // if(n == 0 && target == 0)
        //     return 1;

        // int result = 0;
        // for(int i = 1; i <= k; i++)
        // {
        //     result += numRollsToTarget(n - 1, k, target - i);
        // }

        // return result % (int)(1e9 + 7);

        if(target < n || target > n * k)
            return 0;

        vector<vector<int>> dp(n + 1, vector<int>(target + 1, 0));
        dp[0][0] = 1;

        for(int i = 1; i <= n; i++)
        {
            for(int j = 0; j <= target; j++)
            {
                for(int l = 1; l <= k && l <= j; l++)
                {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - l]) % (int)(1e9 + 7);
                } 
            }
        }

        return dp.back().back();
    }
};
